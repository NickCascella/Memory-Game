{"version":3,"sources":["components/Card.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","image","onCardClick","onCardsChosen","className","onClick","src","Grid","props","cards","chosenCards","shuffleCards","setChosenCards","setScore","score","setHighScore","highScore","handleCardClick","chosenCardsCopy","push","includes","concat","id","map","displayedCard","shuffle","arr","array","i","length","j","Math","floor","random","temp","App","useState","currentCards","setCurrentCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15cf6026.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, image, onCardClick, onCardsChosen }) => {\n  return (\n    <div className=\"card\" onClick={() => onCardClick(name)}>\n      <img className=\"cardImage\" src={image} />\n      <h2>{name}</h2>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport Card from \"./Card\";\n\nconst someRandomVariable = 69;\n\nconst Grid = (props) => {\n  const {\n    cards,\n    chosenCards,\n    shuffleCards,\n    setChosenCards,\n    setScore,\n    score,\n    setHighScore,\n    highScore,\n  } = props;\n\n  const handleCardClick = (name) => {\n    let chosenCardsCopy = [];\n    chosenCardsCopy.push(name);\n    shuffleCards();\n    if (chosenCards.includes(name)) {\n      if (score > highScore) {\n        setHighScore(score);\n      }\n      setScore(0);\n      setChosenCards([]);\n    } else if (!chosenCards.includes(name)) {\n      setScore(score + 1);\n      setChosenCards(chosenCards.concat(chosenCardsCopy));\n    }\n  };\n\n  const renderCards = () => {\n    return cards.map((displayedCard) => {\n      return (\n        <Card\n          name={displayedCard.name}\n          image={displayedCard.image}\n          onCardClick={handleCardClick}\n          onCardsChosen={chosenCards}\n        />\n      );\n    });\n  };\n\n  return <div id=\"gameGrid\">{renderCards()}</div>;\n};\n\nexport default Grid;\nexport { someRandomVariable };\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Grid from \"./components/Grid\";\n\nfunction App() {\n  const [currentCards, setCurrentCards] = useState([\n    {\n      name: \"Snorlax\",\n      image: \"snorlax.jpg\",\n    },\n    {\n      name: \"Psyduck\",\n      image: \"psyduck.png\",\n    },\n    {\n      name: \"Groudon\",\n      image: \"groudon.jpg\",\n    },\n    {\n      name: \"Darkrai\",\n      image: \"darkrai.jpg\",\n    },\n    {\n      name: \"Deoxys\",\n      image: \"deoxys.jpg\",\n    },\n    {\n      name: \"Dragonite\",\n      image: \"dragonite.jpg\",\n    },\n    {\n      name: \"Dugtrio\",\n      image: \"dugtrio.jpg\",\n    },\n    {\n      name: \"Gengar\",\n      image: \"gengar.jpeg\",\n    },\n    {\n      name: \"Ho-oh\",\n      image: \"hooh.jpg\",\n    },\n    {\n      name: \"Lugia\",\n      image: \"lugia.jpg\",\n    },\n    {\n      name: \"Palkia\",\n      image: \"palkia.jpg\",\n    },\n    {\n      name: \"Pikachu\",\n      image: \"pikachu.jpg\",\n    },\n  ]);\n\n  const [chosenCards, setChosenCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  const shuffleCards = () => {\n    setCurrentCards(shuffle(currentCards));\n  };\n\n  return (\n    <div>\n      <header>\n        <div>\n          <div>Pokemon Memory Game!</div>\n          <div id=\"titleMessage\">Try not to select the same Pokemon twice!</div>\n        </div>\n        <div id=\"scoresContainer\">\n          <div id=\"highScore\">Highscore: {highScore}</div>\n          <div id=\"score\">Score: {score}</div>\n        </div>\n      </header>\n      <div id=\"appGrid\">\n        <Grid\n          cards={currentCards}\n          chosenCards={chosenCards}\n          setChosenCards={setChosenCards}\n          shuffleCards={shuffleCards}\n          setScore={setScore}\n          score={score}\n          setHighScore={setHighScore}\n          highScore={highScore}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst shuffle = (arr) => {\n  let array = [...arr];\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}